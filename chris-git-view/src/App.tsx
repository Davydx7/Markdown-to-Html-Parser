import { useEffect, useRef, useState } from 'react';
import './App.css';
import { Gitgraph } from '@gitgraph/react';
import { useRepoStore } from './controllers/repoStore';
import useTestStore from './controllers/testStore';
import { createPatch } from 'diff';

import { faker } from '@faker-js/faker';
// import { html } from 'diff2html';
import { Diff2HtmlUI, Diff2HtmlUIConfig } from 'diff2html/lib/ui/js/diff2html-ui-slim.js';
import 'highlight.js/styles/github.css';
import 'diff2html/bundles/css/diff2html.min.css';

function App(): JSX.Element {
  const [graphString, setGraphString] = useState<string>('');
  const [showGraph, setShowGraph] = useState<boolean>(false);

  const ref = useRef<HTMLDivElement>(null);
  const { setGitRepo, setRefDiv, gitRepo } = useRepoStore((state) => state);

  useEffect(() => {
    if (ref.current !== null) {
      const ui = new Diff2HtmlUI(ref.current, Diffed, {
        matching: 'lines',
        outputFormat: 'side-by-side'
      });

      ui.draw();
      ui.highlightCode();
    }
  }, []);

  const func = Function('gitgraph', `${graphString}`);

  console.log(graphString);

  const { obj, unrelated, setObj, setUnrelated } = useTestStore((state) => state);

  const Diffed = createPatch(
    'fileName',
    `old string
is awesome
thank you`,
    `new string
is awesome
and better
thank you`,
    'oldHeader',
    'newHeader'
  );
  console.log(Diffed);

  const strInput =
    '--- a/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n+++ b/server/vendor/golang.org/x/sys/unix/zsyscall_linux_mipsle.go\n@@ -1035,6 +1035,17 @@ func Prctl(option int, arg2 uintptr, arg3 uintptr, arg4 uintptr, arg5 uintptr) (\n \n // THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n \n+func Pselect(nfd int, r *FdSet, w *FdSet, e *FdSet, timeout *Timespec, sigmask *Sigset_t) (n int, err error) {\n+\tr0, _, e1 := Syscall6(SYS_PSELECT6, uintptr(nfd), uintptr(unsafe.Pointer(r)), uintptr(unsafe.Pointer(w)), uintptr(unsafe.Pointer(e)), uintptr(unsafe.Pointer(timeout)), uintptr(unsafe.Pointer(sigmask)))\n+\tn = int(r0)\n+\tif e1 != 0 {\n+\t\terr = errnoErr(e1)\n+\t}\n+\treturn\n+}\n+\n+// THIS FILE IS GENERATED BY THE COMMAND AT THE TOP; DO NOT EDIT\n+\n func read(fd int, p []byte) (n int, err error) {\n \tvar _p0 unsafe.Pointer\n \tif len(p) > 0 {\n';
  // const outputHtml = html(Diffed, {
  //   drawFileList: false,
  //   matching: 'lines',
  //   outputFormat: 'side-by-side'
  // });

  return (
    <div className="App">
      <div>
        <span>{obj.test}</span>
      </div>
      <div>
        <button onClick={() => setGitRepo('myRepo')}>create repo</button>
        <button onClick={() => gitRepo?.createBranch(faker.lorem.word())}>create branch</button>
        <button onClick={() => gitRepo?.commit('commit')}>commit</button>
        <button onClick={() => setGraphString(gitRepo!.graphFunctionString)}>DrawGraph</button>
        <button onClick={() => setShowGraph(!showGraph)}>toggle Graph</button>
      </div>
      {showGraph && <Gitgraph>{func as any}</Gitgraph>}
      {/* <div
        dangerouslySetInnerHTML={{ __html: outputHtml }}
        style={{
          textAlign: 'start',
          color: 'darkgreen',
          backgroundColor: 'white',
          padding: '1rem'
        }}></div> */}
      <br></br>
      <br></br>
      <div style={{ whiteSpace: 'pre-wrap', textAlign: 'start' }}>{Diffed}</div>
      <div
        ref={ref}
        style={{
          textAlign: 'start',
          color: 'darkgreen',
          backgroundColor: 'white',
          padding: '1rem'
        }}></div>
    </div>
  );
}

export default App;
